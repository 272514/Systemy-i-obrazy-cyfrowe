import numpy as np
from skimage import io, color
from scipy.ndimage import convolve
from numpy.lib.stride_tricks import as_strided
import matplotlib.pyplot as plt

image = io.imread("warwick.jpg")

def load_and_convert_image(path):
    image = io.imread(path)
    if image.shape[-1] == 4:
        image = image[..., :3]
    return color.rgb2gray(image)

image_gray = load_and_convert_image('warwick.jpg')

def max_pool(image, kernel, stride: int):
    input_width, image_height = image.shape[:2]
    kernel_width, kernel_height = kernel.shape
    output_shape = ((input_width - kernel_width) // stride + 1, (image_height - kernel_height) // stride + 1)
    strides = (stride * image.strides[0], stride * image.strides[1]) + image.strides[:2]
    strided_input = as_strided(image, shape=output_shape + (kernel_width, kernel_height), strides=strides)
    return np.max(strided_input, axis=(2, 3))


def laplace():
    l_filter = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]])
    filtered_image = np.dstack([convolve(image[:, :, channel], l_filter, mode="constant", cval=0.0) for channel in range(3)])
    return filtered_image


def rozmycie(image):
    filter = np.array([[1, 1, 1], [2, 4, 2], [1, 1, 1]]) * (1 / 16)
    filtered_image = convolve(image, filter, mode="constant", cval=0.0)
    return filtered_image


def wyostrzenie(image):
    sharp_filter = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
    filtered_image = convolve(image, sharp_filter, mode="constant", cval=0.0)
    return filtered_image

pooled = max_pool(image_gray, kernel=np.zeros([2, 2]), stride=1)
filtered_laplace = laplace()
filtered_blur = rozmycie(image_gray)
filtered_sharp = wyostrzenie(pooled)
filtered_sharp = np.clip(filtered_sharp, 0, 1)

plt.figure(figsize=(10, 5))

plt.subplot(2, 2, 1)
plt.imshow(image)
plt.title('Oryginalny obraz')
plt.axis('off')

plt.subplot(2, 2, 2)
plt.imshow(filtered_sharp, cmap='gray')
plt.title('Wyostrzenie')
plt.axis('off')

plt.subplot(2, 2, 3)
plt.imshow(filtered_blur, cmap="gray")
plt.title('Rozmycie')
plt.axis('off')

plt.subplot(2, 2, 4)
plt.imshow(filtered_laplace)
plt.title('filtr Laplace')
plt.axis('off')

plt.show()
