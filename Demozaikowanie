import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import convolve2d

image = np.load('pandas.npy')

mask_R = np.zeros_like(image[:, :, 0])
mask_R[0::2, 1::2] = 1
mask_G1 = np.zeros_like(image[:, :, 0])
mask_G1[0::2, 0::2] = 1
mask_G2 = np.zeros_like(image[:, :, 0])
mask_G2[1::2, 1::2] = 1
mask_B = np.zeros_like(image[:, :, 0])
mask_B[1::2, 0::2] = 1

masked_image = np.zeros_like(image)
masked_image[:, :, 0] = image[:, :, 0] * mask_R
masked_image[:, :, 1] = image[:, :, 1] * (mask_G1 + mask_G2)
masked_image[:, :, 2] = image[:, :, 2] * mask_B

kernel_R = np.array([[0, 0.5, 0], [0, 1, 0], [0, 0.5, 0]])
kernel_G = np.array([[0, 0.25, 0], [0.25, 1, 0.25], [0, 0.25, 0]])
kernel_B = np.array([[0, 0.5, 0], [0, 1, 0], [0, 0.5, 0]])

R_interp = convolve2d(masked_image[:, :, 0], kernel_R, boundary='symm', mode='same')
G_interp = convolve2d(masked_image[:, :, 1], kernel_G, boundary='symm', mode='same')
B_interp = convolve2d(masked_image[:, :, 2], kernel_B, boundary='symm', mode='same')

interpolated_image = np.clip(np.dstack((R_interp, G_interp, B_interp)), 0, 1)

kernel = np.array([[1/4, 1/2, 1/4], [1/2, 1.0, 1/2], [1/4, 1/2, 1/4]])

R_conv = convolve2d(masked_image[:, :, 0], kernel, boundary='symm', mode='same')
G1_conv = convolve2d(masked_image[:, :, 1] * mask_G1, kernel, boundary='symm', mode='same')
G2_conv = convolve2d(masked_image[:, :, 1] * mask_G2, kernel, boundary='symm', mode='same')
G_conv = (G1_conv + G2_conv) / 2
B_conv = convolve2d(masked_image[:, :, 2], kernel, boundary='symm', mode='same')

convoluted_image = np.clip(np.dstack((R_conv, G_conv, B_conv)), 0, 1)

fig, axs = plt.subplots(1, 3, figsize=(15, 5))

axs[0].imshow(masked_image)
axs[0].set_title('Image with Bayer GRBG Mask')
axs[0].axis('off')

axs[1].imshow(interpolated_image)
axs[1].set_title('Demosaicked Image (Interpolation)')
axs[1].axis('off')

axs[2].imshow(convoluted_image)
axs[2].set_title('Demosaicked Image (2D Convolution)')
axs[2].axis('off')

plt.show()
